{"ast":null,"code":"var _jsxFileName = \"/home/lntinfotech/Desktop/ReactWorkspace/react-test/src/Views/Timer/Timer.js\";\n// http://tutorialzine.com/2014/07/5-practical-examples-for-learning-facebooks-react-framework/\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nvar TimerExample = React.createClass({\n  displayName: \"TimerExample\",\n  getInitialState: function () {\n    // This is called before our render function. The object that is \n    // returned is assigned to this.state, so we can use it later.\n    return {\n      elapsed: 0\n    };\n  },\n  componentDidMount: function () {\n    // componentDidMount is called by react when the component \n    // has been rendered on the page. We can set the interval here:\n    this.timer = setInterval(this.tick, 50);\n  },\n  componentWillUnmount: function () {\n    // This method is called immediately before the component is removed\n    // from the page and destroyed. We can clear the interval here:\n    clearInterval(this.timer);\n  },\n  tick: function () {\n    // This function is called every 50 ms. It updates the \n    // elapsed counter. Calling setState causes the component to be re-rendered\n    this.setState({\n      elapsed: new Date() - this.props.start\n    });\n  },\n  render: function () {\n    // Calculate elapsed to tenth of a second:\n    var elapsed = Math.round(this.state.elapsed / 100); // This will give a number with one digit after the decimal dot (xx.x):\n\n    var seconds = (elapsed / 10).toFixed(1); // Although we return an entire <p> element, react will smartly update\n    // only the changed parts, which contain the seconds variable.\n\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"This example was started \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, seconds, \" seconds\"), \" ago.\");\n  }\n});\nReactDOM.render(React.createElement(TimerExample, {\n  start: Date.now(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n}), document.getElementById('container'));","map":{"version":3,"sources":["/home/lntinfotech/Desktop/ReactWorkspace/react-test/src/Views/Timer/Timer.js"],"names":["React","Component","ReactDOM","TimerExample","createClass","getInitialState","elapsed","componentDidMount","timer","setInterval","tick","componentWillUnmount","clearInterval","setState","Date","props","start","render","Math","round","state","seconds","toFixed","now","document","getElementById"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AAGA,IAAIC,YAAY,GAAGH,KAAK,CAACI,WAAN,CAAkB;AAAA;AAEjCC,EAAAA,eAAe,EAAE,YAAU;AAEvB;AACA;AAEA,WAAO;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAP;AACH,GARgC;AAUjCC,EAAAA,iBAAiB,EAAE,YAAU;AAEzB;AACA;AAEA,SAAKC,KAAL,GAAaC,WAAW,CAAC,KAAKC,IAAN,EAAY,EAAZ,CAAxB;AACH,GAhBgC;AAkBjCC,EAAAA,oBAAoB,EAAE,YAAU;AAE5B;AACA;AAEAC,IAAAA,aAAa,CAAC,KAAKJ,KAAN,CAAb;AACH,GAxBgC;AA0BjCE,EAAAA,IAAI,EAAE,YAAU;AAEZ;AACA;AAEA,SAAKG,QAAL,CAAc;AAACP,MAAAA,OAAO,EAAE,IAAIQ,IAAJ,KAAa,KAAKC,KAAL,CAAWC;AAAlC,KAAd;AACH,GAhCgC;AAkCjCC,EAAAA,MAAM,EAAE,YAAW;AAEf;AACA,QAAIX,OAAO,GAAGY,IAAI,CAACC,KAAL,CAAW,KAAKC,KAAL,CAAWd,OAAX,GAAqB,GAAhC,CAAd,CAHe,CAKf;;AACA,QAAIe,OAAO,GAAG,CAACf,OAAO,GAAG,EAAX,EAAegB,OAAf,CAAuB,CAAvB,CAAd,CANe,CAQf;AACA;;AAEA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,OAAJ,aAA5B,UAAP;AACH;AA9CgC,CAAlB,CAAnB;AAiDAnB,QAAQ,CAACe,MAAT,CACI,oBAAC,YAAD;AAAc,EAAA,KAAK,EAAEH,IAAI,CAACS,GAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEIC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAFJ","sourcesContent":["// http://tutorialzine.com/2014/07/5-practical-examples-for-learning-facebooks-react-framework/\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\n\nvar TimerExample = React.createClass({\n\n    getInitialState: function(){\n\n        // This is called before our render function. The object that is \n        // returned is assigned to this.state, so we can use it later.\n\n        return { elapsed: 0 };\n    },\n\n    componentDidMount: function(){\n\n        // componentDidMount is called by react when the component \n        // has been rendered on the page. We can set the interval here:\n\n        this.timer = setInterval(this.tick, 50);\n    },\n\n    componentWillUnmount: function(){\n\n        // This method is called immediately before the component is removed\n        // from the page and destroyed. We can clear the interval here:\n\n        clearInterval(this.timer);\n    },\n\n    tick: function(){\n\n        // This function is called every 50 ms. It updates the \n        // elapsed counter. Calling setState causes the component to be re-rendered\n\n        this.setState({elapsed: new Date() - this.props.start});\n    },\n\n    render: function() {\n        \n        // Calculate elapsed to tenth of a second:\n        var elapsed = Math.round(this.state.elapsed / 100);\n\n        // This will give a number with one digit after the decimal dot (xx.x):\n        var seconds = (elapsed / 10).toFixed(1);    \n\n        // Although we return an entire <p> element, react will smartly update\n        // only the changed parts, which contain the seconds variable.\n\n        return <p>This example was started <b>{seconds} seconds</b> ago.</p>;\n    }\n});\n\nReactDOM.render(\n    <TimerExample start={Date.now()} />,\n    document.getElementById('container')\n);"]},"metadata":{},"sourceType":"module"}